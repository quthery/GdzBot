from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from ai.answer.models import InputData
from ai.answer.answer import Answerer
from ai.typing import get_type
from random import randint
import asyncio

answer = Router()
ai = Answerer()
class Data(StatesGroup): 
	image = State()
	type = State()

@answer.message(F.text == "–†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚úçÔ∏è")
async def start_dialog(message: Message, state: FSMContext):
	await state.set_state(Data.image)
	await message.answer("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—åüì∑")

@answer.message(Data.image)
async def set_image(message: Message, state: FSMContext):
	if not message.content_type == "photo":
		await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüò†")
		await state.set_state(Data.image)
		return
	await state.update_data(image=message.photo[-1].file_id)
	await state.set_state(Data.type)
	await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µü§ñ")


@answer.message(Data.type)
async def set_type(message: Message, state: FSMContext):

    type_of_question = await get_type(message.text)
    print(type)
    if type_of_question is None:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        await state.clear()
        return

    await state.update_data(type=type_of_question)
    data = await state.get_data()
 
    await message.answer("–°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüñºÔ∏è")
    path_to_image = f'images/{randint(1, 949888)}.jpg'
    await message.bot.download(file=data['image'], destination=path_to_image)
    
    input_data = InputData(prompt=str(type_of_question), image=path_to_image, type=str(type_of_question))
    print(input_data)
    
    output = await ai.create_output(input_data)
    
    if output is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return
    await message.answer("–°—Ç—Ä—É–∫—Ç—É–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å‚åõ")
    answer = await ai.answer(output)
    await message.answer("–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏üåê")
    await asyncio.sleep(5)
    await message.answer(answer, parse_mode='Markdown')
    await asyncio.sleep(5)

	
	


	
